buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

apply plugin: 'java' // or 'groovy'. Must be explicitly applied
apply plugin: 'com.github.johnrengelman.shadow'


subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'com.github.johnrengelman.shadow'     
    
    //apply from: 'http://gradle-plugins.mihosoft.eu/latest/vlicenseheader.gradle'
    //repairHeaders.licenseHeaderText = new File(rootDir,'fxyz-license.txt')
    
    Properties cfg = new Properties()
    cfg.load(new FileInputStream("$rootDir/fxyz-build.properties"))

    ext {
        artifact_suffix          = cfg.artifact_suffix
        specification_title      = cfg.fxyz_specification_title  //'Java 8u20'
        specification_version    = cfg.fxyz_specification_version //'8.20.7'
        fxyz_name                = 'FXyzLibs'
        fxyz_sampler_name        = 'FXyz-Sampler'
        fxyz_sampler_version     = cfg.fxyz_sampler_specification_version + artifact_suffix
        fxyz_sampler_mainClass   = 'org.fxyz.client.FXyzClient'
    }
    
    group = 'org.fxyz'
    version = specification_version + artifact_suffix

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://oss.sonatype.org/content/repositories/snapshots/' 
        }
        maven {
            name 'JCenter - for Gradle Shadow'
            url 'http://jcenter.bintray.com/'
        }
    }
    
    
    dependencies {        
        testCompile 'junit:junit:[4,)'
    }

    test {
        testLogging {
            // Show that tests are run in the command-line output
            events 'started', 'passed'
        }
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '2.0'
    }

    compileJava {  
        options.encoding = "UTF-8"
    }

    task sourceJar(type: Jar) {
        from sourceSets.main.java
        from sourceSets.main.resources
        classifier = 'sources'
    }

    task javadocJar(type: Jar) {
        dependsOn javadoc
        from javadoc.destinationDir
        classifier = 'javadoc'
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }
}


